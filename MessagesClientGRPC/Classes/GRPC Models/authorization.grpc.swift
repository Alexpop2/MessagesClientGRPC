//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: authorization.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import Dispatch
import SwiftGRPC
import SwiftProtobuf

internal protocol Authorizationservice_AuthorizationServiceAuthorizeCall: ClientCallUnary {}

fileprivate final class Authorizationservice_AuthorizationServiceAuthorizeCallBase: ClientCallUnaryBase<Authorizationservice_FirebaseToken, Authorizationservice_Result>, Authorizationservice_AuthorizationServiceAuthorizeCall {
  override class var method: String { return "/authorizationservice.AuthorizationService/Authorize" }
}


/// Instantiate Authorizationservice_AuthorizationServiceServiceClient, then call methods of this protocol to make API calls.
internal protocol Authorizationservice_AuthorizationServiceService: ServiceClient {
  /// Synchronous. Unary.
  func authorize(_ request: Authorizationservice_FirebaseToken, metadata customMetadata: Metadata) throws -> Authorizationservice_Result
  /// Asynchronous. Unary.
  func authorize(_ request: Authorizationservice_FirebaseToken, metadata customMetadata: Metadata, completion: @escaping (Authorizationservice_Result?, CallResult) -> Void) throws -> Authorizationservice_AuthorizationServiceAuthorizeCall

}

internal extension Authorizationservice_AuthorizationServiceService {
  /// Synchronous. Unary.
  func authorize(_ request: Authorizationservice_FirebaseToken) throws -> Authorizationservice_Result {
    return try self.authorize(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  func authorize(_ request: Authorizationservice_FirebaseToken, completion: @escaping (Authorizationservice_Result?, CallResult) -> Void) throws -> Authorizationservice_AuthorizationServiceAuthorizeCall {
    return try self.authorize(request, metadata: self.metadata, completion: completion)
  }

}

internal final class Authorizationservice_AuthorizationServiceServiceClient: ServiceClientBase, Authorizationservice_AuthorizationServiceService {
  /// Synchronous. Unary.
  internal func authorize(_ request: Authorizationservice_FirebaseToken, metadata customMetadata: Metadata) throws -> Authorizationservice_Result {
    return try Authorizationservice_AuthorizationServiceAuthorizeCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  internal func authorize(_ request: Authorizationservice_FirebaseToken, metadata customMetadata: Metadata, completion: @escaping (Authorizationservice_Result?, CallResult) -> Void) throws -> Authorizationservice_AuthorizationServiceAuthorizeCall {
    return try Authorizationservice_AuthorizationServiceAuthorizeCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

}

